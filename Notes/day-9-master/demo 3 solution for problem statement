import java.math.RoundingMode;
import java.text.DecimalFormat;

public class AssignmentDiv {

	static String myDivFunction(float num1,float num2)
	{
		if(num1< 0 || num2<0)	
		{
			return "negavtive numbers not allowed";
		}
		if(num2==0)
		{
			return "cannot divide a number by zero";	
		}
		
		double res=num1/num2;
		
		DecimalFormat df=new DecimalFormat("##.#");
		df.setRoundingMode(RoundingMode.CEILING);
				
		return "result "+df.format(res);
	}
	
	
	
}



-----------------


import static org.junit.jupiter.api.Assertions.assertEquals;

import org.junit.jupiter.api.Test;

public class AsignmentDivTest {

	
	@Test
	void whenGivenNegavtiveNumberReturnNOtAllowed()
	{
		
		AssignmentDiv assignmentDiv=new AssignmentDiv();
		
		assertEquals("negavtive numbers not allowed", assignmentDiv.myDivFunction(-1,2),"check negative number failed");
		assertEquals("negavtive numbers not allowed", assignmentDiv.myDivFunction(1,-2),"check negative number failed");
		
	}
	
	@Test
	void whenDivByZeroReturnCannotDivByZero()
	{
		AssignmentDiv assignmentDiv=new AssignmentDiv();	
		assertEquals("cannot divide a number by zero", assignmentDiv.myDivFunction(10,0),"check div by zero failed");
		
	}
	
	@Test
	void when10And3isGivenReturnResult()
	{
		AssignmentDiv assignmentDiv=new AssignmentDiv();	
		assertEquals("result 3.4", assignmentDiv.myDivFunction(10,3),"check the logic of the method");
		
	}
	
	@Test
	void when20And3isGivenReturnResult()
	{
		AssignmentDiv assignmentDiv=new AssignmentDiv();	
		assertEquals("result 6.7", assignmentDiv.myDivFunction(20,3),"check the logic of the method");
		
	}
	
	@Test
	void when20And6isGivenReturnResult()
	{
		AssignmentDiv assignmentDiv=new AssignmentDiv();	
		assertEquals("result 3.4", assignmentDiv.myDivFunction(20,6),"check the logic of the method");
		
	}
	
	
	
	
}

